# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      
          
      
      - name: Pull Frida Latest Release
        id: pullFridaLatestRelease
        uses: actions/github-script@v3.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const releaseResponse = await github.repos.getLatestRelease({
              owner: 'frida',
              repo: 'frida',
            })
            
      - name: Check release version
        id: checkReleaseVersion
        uses: actions/github-script@v3.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              const releaseVersion = '15.1.4'
              const releaseResponse = await github.repos.getLatestRelease({
                owner: 'hzzheyang',
                repo: 'strongR-frida-android',
                tag: releaseVersion
              })
              const {
                data: { id: releaseId, html_url: htmlUrl, upload_url: uploadUrl }
              } = releaseResponse;
              core.setOutput('id', releaseId);
              core.setOutput('html_url', htmlUrl);
              core.setOutput('upload_url', uploadUrl);
              core.setOutput('version', releaseVersion);
              
            } catch (e) {
              core.setFailed(e.message);
            }
      - name: Run a one-line script
        with:
          html_url: '${{ steps.checkReleaseVersion.outputs.html_url }}'
          id: '${{ steps.checkReleaseVersion.outputs.id }}'
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
